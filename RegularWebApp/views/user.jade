extends user-layout

mixin suggestedUserMixin(identity)
  tr(data-id='#{identity.user_id}')
    td #{identity.user_id}
    td #{identity.provider || identity.user_id.split('|')[0]}
    td 
      if (identity.picture)
        img.profile-image(src='#{identity.picture}')
    td #{identity.name}
    td #{identity.nickname}
    td #{identity.user_metadata}
    td #{identity.app_metadata}  
    td
      button.btn.btn-success.btn-xs.unlink(onclick='linkAccount("#{identity.user_id}")') link 

mixin identityMixin(identity)
  tr(data-id='#{identity.user_id}')
    td #{identity.provider}
    td #{identity.user_id}
    td #{identity.connection}
    td 
      if (identity.profileData && identity.profileData.picture)
        img.profile-image(src='#{identity.profileData && identity.profileData.picture}')
    td #{identity.profileData && identity.profileData.name}
    td #{identity.profileData && identity.profileData.email}&nbsp;
      if (identity.profileData && identity.profileData.email && identity.profileData.email_verified)
        span.label.label-success verified
      else if (identity.profileData && identity.profileData.email)
        span.label.label-danger not verified
    td
      button.btn.btn-danger.btn-xs.unlink(onclick='unlinkAccount("#{identity.provider}","#{identity.user_id}")') unlink 

mixin description(label,val)
  dt #{label}
  dd #{val}

block content
  
  .panel.panel-default
    .panel-heading 
      img.img-circle.profile-image(src='#{user.picture}') 
      |Root Profile 
    .panel-body
      dl.dl-horizontal
        dt email
        dd #{user.email} &nbsp;
          if (user.email_verified)
            span.label.label-success verified
          else
            span.label.label-danger not verified
        +description('name',user.name)
        +description('provider',provider)
        +description('locale',user.locale)
        +description('user_id',user.user_id)
        +description('nickname',user.nickname)
        +description('user_metadata',JSON.stringify(user.user_metadata,null,4))
        +description('app_metadata',JSON.stringify(user.app_metadata,null,4))

  .panel.panel-default
      .panel-heading Linked Accounts
      if (user.identities.length > 1)
        table.table.identities
          thead
            tr
              th provider
              th id
              th connection
              th(style='width:5%')
              th name
              th email
              th actions
          tbody
          each identity in user.identities
            if (identity.provider !== user.user_id.split('|')[0] && identity.user_id !== user.user_id.split('|')[1])
              +identityMixin(identity)
      else
        .panel-body
          p You don't have any accounts linked.
      .panel-footer
        button.btn.btn-primary(onclick='linkNewAccount()') Link another account
        | &nbsp;&nbsp;
        button.btn.btn-warning(onclick='linkPasswordlessSMS()') Link Passwordless SMS
        | &nbsp;&nbsp;
        button.btn.btn-warning(onclick='linkPasswordlessEmailCode()') Link Passwordless Email Code

  .modal#suggest-modal
    .modal-dialog.modal-lg
      .modal-content
        .modal-header
          button(type="button" class="close" data-dismiss="modal" aria-hidden="true") Ã—
          h4 Link Accounts
        .modal-body
          p We noticed there are other registered users with same and verified e-mail address: <strong>#{user.email}</strong>. Do you want to link the accounts?
          table.table.table-condensed
            thead
              tr
                th user_id
                th name
                th user_metadata
                th app_metadata
                th actions
            tbody#suggested-users
        .modal-footer
          button.btn.btn-default(type="button" data-dismiss="modal") No, thanks.

block script
  script.
    var auth0Domain = '#{env.AUTH0_DOMAIN}';
    var rootUserId = '#{user.user_id}';
    var accessToken = '#{access_token}';
    var user = !{JSON.stringify(user)};
    console.log('user',user);
    var lock = new Auth0Lock('#{env.AUTH0_CLIENT_ID}', '#{env.AUTH0_DOMAIN}');


    function linkNewAccount(){
      //we show only signin option, don't remember last login and change login message
      lock.showSignin({
        rememberLastLogin:false,
        dict: {
          signin: {
            title: 'Link another account'
          }
        }
      });
    }

    /*
    * Link using Passwordless SMS connection
    */
    function linkPasswordlessSMS(){
      // Initialize Passwordless Lock instance
      var lock = new Auth0LockPasswordless( '#{env.AUTH0_CLIENT_ID}', '#{env.AUTH0_DOMAIN}' );
      var opts = { 
        autoclose: true, 
        rememberLastLogin: false,
        dict:{
          phone: {
            headerText: "Enter your phone to sign in <br>or create an account to link to."
          }
        }
      };
      // Open the lock in SMS mode with the ability to handle the authentication in page
      lock.sms( opts , function (err, profile) {
        if (!err){
          // link account using user_id
          linkAccount(profile.user_id);
        }
      });
    }

    /*
    * Link using Passwordless Email connection
    */
    function linkPasswordlessEmailCode(){
      // Initialize Passwordless Lock instance
      var lock = new Auth0LockPasswordless( '#{env.AUTH0_CLIENT_ID}', '#{env.AUTH0_DOMAIN}' );
      var opts = { 
        autoclose: true, 
        rememberLastLogin: false,
        dict:{
          email: {
            headerText: "Enter your email to sign in or sign up to the account to link to."
          }
        }
      };
      // Open the lock in Email Code mode with the ability to handle the authentication in page
      lock.emailcode( opts , function (err, profile) {
        if (!err){
          // link account using user_id
          linkAccount(profile.user_id);
        }
      });
    }
        
    function linkAccount(targetUserId) {
      $.ajax({
        type: 'POST',
        url: '/user/link-accounts/' + targetUserId,
      }).then(function(){
        alert('linked!!');
        location.reload();
      }).fail(function(jqXHR){
        alert('Error linking Accounts: ' + jqXHR.status + " " + jqXHR.responseText);
      });
    }

    function unlinkAccount(provider,userId){
      $.ajax({
        type: 'POST',
        url: '/user/unlink-accounts/' + provider + '|' + userId,
      }).then(function(){
        alert('unlinked!!');
        location.reload();
      }).fail(function(jqXHR){
        alert('Error unlinking Accounts: ' + jqXHR.status + " " + jqXHR.responseText);
      });
    }

    function getSuggestedUsers(){
      $.ajax({
        url: '/user/suggested-users'
      }).then(function(identities){
        if (identities.length > 0){

          $('#suggested-users tr').remove();

          $.each(identities,function(index,identity){
            $('#suggested-users').append(
              `<tr>
                <td>${identity.user_id}</td>
                <td>${identity.name}</td>
                <td>${JSON.stringify(identity.user_metadata,null,2)}</td>
                <td>${JSON.stringify(identity.app_metadata,null,2)}</td>
                <td><button onclick="linkAccount('${identity.user_id}')" class="btn btn-success">Link</button></td>
              </tr>`);
          });

          $('#suggest-modal').modal();
        }
      }).fail(function(jqXHR){
        alert('Error getting suggested users: ' + jqXHR.status + " " + jqXHR.responseText);
      });
    }

    function isRootIdentity(identity){
      return identity.provider === rootUserId.split('|')[0] && identity.user_id === rootUserId.split('|')[1];
    }

    $(document).ready(function() {

      //request suggested accounts to link to
      if (user.email_verified){
        getSuggestedUsers();
      }

      //handle redirection from iDP after login to a new account for linking
      var hash = lock.parseHash();
      if (hash) {
        window.location.hash = ''; //clean hash
        console.log('hash',hash);
        if (hash.error) {
          alert('There was an error logging in ' + hash.error );
        } else {
          //call to link accounts using the newly authenticated user's id
          linkAccount(hash.profile.sub);
        }
      }
    });
